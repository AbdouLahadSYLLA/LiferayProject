package com.example.plugins.model.impl;

import com.example.plugins.model.Patient;
import com.example.plugins.model.PatientModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Patient service. Represents a row in the &quot;AddPatient_Patient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.plugins.model.PatientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PatientImpl
 * @see com.example.plugins.model.Patient
 * @see com.example.plugins.model.PatientModel
 * @generated
 */
public class PatientModelImpl extends BaseModelImpl<Patient>
    implements PatientModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a patient model instance should use the {@link com.example.plugins.model.Patient} interface instead.
     */
    public static final String TABLE_NAME = "AddPatient_Patient";
    public static final Object[][] TABLE_COLUMNS = {
            { "patientId", Types.BIGINT },
            { "nom", Types.VARCHAR },
            { "prenom", Types.VARCHAR },
            { "patientAge", Types.INTEGER },
            { "patientGenre", Types.INTEGER },
            { "patientAddresse", Types.VARCHAR },
            { "patientEmail", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table AddPatient_Patient (patientId LONG not null primary key,nom VARCHAR(75) null,prenom VARCHAR(75) null,patientAge INTEGER,patientGenre INTEGER,patientAddresse VARCHAR(75) null,patientEmail VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table AddPatient_Patient";
    public static final String ORDER_BY_JPQL = " ORDER BY patient.patientId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AddPatient_Patient.patientId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.plugins.model.Patient"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.plugins.model.Patient"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.plugins.model.Patient"));
    private static ClassLoader _classLoader = Patient.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Patient.class
        };
    private long _patientId;
    private String _nom;
    private String _prenom;
    private int _patientAge;
    private int _patientGenre;
    private String _patientAddresse;
    private String _patientEmail;
    private Patient _escapedModel;

    public PatientModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _patientId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPatientId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _patientId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Patient.class;
    }

    @Override
    public String getModelClassName() {
        return Patient.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("patientId", getPatientId());
        attributes.put("nom", getNom());
        attributes.put("prenom", getPrenom());
        attributes.put("patientAge", getPatientAge());
        attributes.put("patientGenre", getPatientGenre());
        attributes.put("patientAddresse", getPatientAddresse());
        attributes.put("patientEmail", getPatientEmail());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long patientId = (Long) attributes.get("patientId");

        if (patientId != null) {
            setPatientId(patientId);
        }

        String nom = (String) attributes.get("nom");

        if (nom != null) {
            setNom(nom);
        }

        String prenom = (String) attributes.get("prenom");

        if (prenom != null) {
            setPrenom(prenom);
        }

        Integer patientAge = (Integer) attributes.get("patientAge");

        if (patientAge != null) {
            setPatientAge(patientAge);
        }

        Integer patientGenre = (Integer) attributes.get("patientGenre");

        if (patientGenre != null) {
            setPatientGenre(patientGenre);
        }

        String patientAddresse = (String) attributes.get("patientAddresse");

        if (patientAddresse != null) {
            setPatientAddresse(patientAddresse);
        }

        String patientEmail = (String) attributes.get("patientEmail");

        if (patientEmail != null) {
            setPatientEmail(patientEmail);
        }
    }

    @Override
    public long getPatientId() {
        return _patientId;
    }

    @Override
    public void setPatientId(long patientId) {
        _patientId = patientId;
    }

    @Override
    public String getNom() {
        if (_nom == null) {
            return StringPool.BLANK;
        } else {
            return _nom;
        }
    }

    @Override
    public void setNom(String nom) {
        _nom = nom;
    }

    @Override
    public String getPrenom() {
        if (_prenom == null) {
            return StringPool.BLANK;
        } else {
            return _prenom;
        }
    }

    @Override
    public void setPrenom(String prenom) {
        _prenom = prenom;
    }

    @Override
    public int getPatientAge() {
        return _patientAge;
    }

    @Override
    public void setPatientAge(int patientAge) {
        _patientAge = patientAge;
    }

    @Override
    public int getPatientGenre() {
        return _patientGenre;
    }

    @Override
    public void setPatientGenre(int patientGenre) {
        _patientGenre = patientGenre;
    }

    @Override
    public String getPatientAddresse() {
        if (_patientAddresse == null) {
            return StringPool.BLANK;
        } else {
            return _patientAddresse;
        }
    }

    @Override
    public void setPatientAddresse(String patientAddresse) {
        _patientAddresse = patientAddresse;
    }

    @Override
    public String getPatientEmail() {
        if (_patientEmail == null) {
            return StringPool.BLANK;
        } else {
            return _patientEmail;
        }
    }

    @Override
    public void setPatientEmail(String patientEmail) {
        _patientEmail = patientEmail;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Patient.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Patient toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Patient) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PatientImpl patientImpl = new PatientImpl();

        patientImpl.setPatientId(getPatientId());
        patientImpl.setNom(getNom());
        patientImpl.setPrenom(getPrenom());
        patientImpl.setPatientAge(getPatientAge());
        patientImpl.setPatientGenre(getPatientGenre());
        patientImpl.setPatientAddresse(getPatientAddresse());
        patientImpl.setPatientEmail(getPatientEmail());

        patientImpl.resetOriginalValues();

        return patientImpl;
    }

    @Override
    public int compareTo(Patient patient) {
        int value = 0;

        if (getPatientId() < patient.getPatientId()) {
            value = -1;
        } else if (getPatientId() > patient.getPatientId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Patient)) {
            return false;
        }

        Patient patient = (Patient) obj;

        long primaryKey = patient.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Patient> toCacheModel() {
        PatientCacheModel patientCacheModel = new PatientCacheModel();

        patientCacheModel.patientId = getPatientId();

        patientCacheModel.nom = getNom();

        String nom = patientCacheModel.nom;

        if ((nom != null) && (nom.length() == 0)) {
            patientCacheModel.nom = null;
        }

        patientCacheModel.prenom = getPrenom();

        String prenom = patientCacheModel.prenom;

        if ((prenom != null) && (prenom.length() == 0)) {
            patientCacheModel.prenom = null;
        }

        patientCacheModel.patientAge = getPatientAge();

        patientCacheModel.patientGenre = getPatientGenre();

        patientCacheModel.patientAddresse = getPatientAddresse();

        String patientAddresse = patientCacheModel.patientAddresse;

        if ((patientAddresse != null) && (patientAddresse.length() == 0)) {
            patientCacheModel.patientAddresse = null;
        }

        patientCacheModel.patientEmail = getPatientEmail();

        String patientEmail = patientCacheModel.patientEmail;

        if ((patientEmail != null) && (patientEmail.length() == 0)) {
            patientCacheModel.patientEmail = null;
        }

        return patientCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{patientId=");
        sb.append(getPatientId());
        sb.append(", nom=");
        sb.append(getNom());
        sb.append(", prenom=");
        sb.append(getPrenom());
        sb.append(", patientAge=");
        sb.append(getPatientAge());
        sb.append(", patientGenre=");
        sb.append(getPatientGenre());
        sb.append(", patientAddresse=");
        sb.append(getPatientAddresse());
        sb.append(", patientEmail=");
        sb.append(getPatientEmail());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.example.plugins.model.Patient");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>patientId</column-name><column-value><![CDATA[");
        sb.append(getPatientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nom</column-name><column-value><![CDATA[");
        sb.append(getNom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>prenom</column-name><column-value><![CDATA[");
        sb.append(getPrenom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientAge</column-name><column-value><![CDATA[");
        sb.append(getPatientAge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientGenre</column-name><column-value><![CDATA[");
        sb.append(getPatientGenre());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientAddresse</column-name><column-value><![CDATA[");
        sb.append(getPatientAddresse());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientEmail</column-name><column-value><![CDATA[");
        sb.append(getPatientEmail());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
